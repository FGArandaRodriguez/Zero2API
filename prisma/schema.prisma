// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Menu {
  id           Int       @id @default(autoincrement())
  nombre       String
  descripcion  String
  precio       Float
  imagen       String
  categoria    Categorias @relation(fields: [id_categoria], references: [id])
  id_categoria Int
}

model Pedidos {
  id    Int      @id @default(autoincrement())
  fecha DateTime
  mesa Mesas @relation(fields: [id_mesa], references: [id])
  id_mesa Int
  cliente Clientes @relation(fields: [id_cliente], references: [id])
  id_cliente Int
  empleado Empleados @relation(fields: [id_empleado], references: [id])
  id_empleado Int
  tipo_pedido String
}

model Categorias {
  id     Int    @id @default(autoincrement())
  nombre String
  Menu   Menu[]
}

model Mesas {
  id Int @id @default(autoincrement())
  capacidad Int
  numero Int
  estado Boolean
  empleado Empleados @relation(fields: [id_empleado], references: [id])
  id_empleado Int
  Pedidos Pedidos[]
}

model Empleados {
  id Int @id @default(autoincrement())
  nombre String
  puesto String
  salario Float
  Mesa Mesas[]
  Pedidos Pedidos[]
}

model Reservas {
  id Int @id @default(autoincrement())
  id_cliente Int
  id_mesa Int
  fecha DateTime
  numero_personas Int
  confirmacion Boolean
}

model Clientes {
  id Int @id @default(autoincrement())
  nombre String
  telefono String
  email String
  Pedidos Pedidos[]
}

model Permisos {
  id Int @id @default(autoincrement())
  nombre String
  descripcion String
}

model Ticket {
  id_ticket Int @id @default(autoincrement())
  id_pedido Int 
  pedido Pedido @relation(fields: [id_pedido], references: [id_pedido] )
  id_metodo_pago Int
  metododo_pago Metodo_Pago @relation(fields: [id_metodo_pago], references: [id_metodo_pago])
  total Float
}

model Ticket {
  id_ticket Int @id @default(autoincrement())
  id_pedido Int 
  pedido Pedido @relation(fields: [id_pedido], references: [id_pedido] )
  id_metodo_pago Int
  metododo_pago Metodo_Pago @relation(fields: [id_metodo_pago], references: [id_metodo_pago])
  total Float
}

model DetallePedido {
  id_detalle_pedido Int @id @default(autoincrement())
  id_pedido         Int
  id_menu           Int
  cantidad          Int
  subtotal          Float
  Pedido Pedido @relation(fields: [id_pedido], references: [id_pedido])
  Menu   Menu  @relation(fields: [id_menu], references: [id_menu])
}

model Pago {
    id             Int           @id @default(autoincrement())
    pedido        Pedido       @relation(fields: [id_pedido], references: [id_pedido])
    id_pedido      Int
    metodo_pago    Metodo_Pago  @relation(fields: [id_metodo_pago], references: [id_metodo_pago])
    id_metodo_pago Int
    fecha_pago     DateTime      @default(now())
    total          Float
}

model Menu {
  id_menu Int @id @default(autoincrement())
  DetallePedido DetallePedido[]
}


model Metodo_Pago {
  id_metodo_pago Int @id @default(autoincrement())
  Ticket Ticket[]
  nombre String?
  tipo String
  Pago Pago[]
}

model Producto {
  id Int  @id @default(autoincrement())
  nombre String
  descripcion String
  precio Float
  stock Int
  createAt DateTime @default(now())
}
